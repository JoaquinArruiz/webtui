---
interface Project {
  name: string;
  url: string;
  image: string;
  tags?: string[];
}

const projects: Array<[Project, Project] | [Project]> = [
  [
    {
      name: 'Stefan Vučković - Software Engineer',
      url: 'https://stefvuck.dev',
      image: '/gallery/stefvuck-dev.png',
      tags: ['Personal Portfolio'],
    },
    {
      name: 'Placeholder',
      url: 'https://example.com',
      image: '/gallery/placeholder.png',
      tags: ['Unknown']
    },
  ],
  [
    {
      name: 'Todo',
      url: 'https://localhost:3000',
      image: '/gallery/placeholder.png',
      tags: ['Feature', 'Bug']
    },
    {
      name: 'Another Placeholder',
      url: 'https://example.com',
      image: '/gallery/placeholder.png',
      tags: ['Not here yet']
    },
  ],
];
---

<section id="gallery" style={{ minHeight: `${200 + ((projects.length - 2) * 50)}vh`}} data-index="0">
  <column id="visible-content" align-="center">
    <column class="content">
      <row gap-="1">
        <h2 is-="badge" variant-="peach" style="color: var(--background0)">&#xefc9; Gallery</h2>
        <span><span id="index-counter">0</span>/{projects.length}</span>
      </row>
      <p>Awesome projects built with WebTUI</p>
      <column id="projects" gap-="1">
        {projects.map((projects, i) => 
          <row class="project-row" data-index={i} data-visible={i === 0}>
            {projects.map((project) =>
              <a href={project.url} target="_blank" class="project">
                <column class="preview" box-="round">
                  <img src={project.image} alt={project.name} />
                </column>
                <column class="project-description">
                  <strong>{project.name}</strong>
                  <p>{project.url}</p>
                  <row gap-="1">
                    {project.tags?.map((tag) => <span is-="badge" variant-="background3" cap-="round">{tag}</span>)}
                  </row>
                </column>
              </a>
            )}
          </row>
        )}
      </column>
    </column>
  </column>
  {projects.map((_, i) => 
    i === 0 ? null : <div class="project-scroll-marker" data-index={i} />
  )}
</section>

<style>
section {
  position: relative;
}

.content {
  flex-direction: column !important;
}

#gallery-projects {
  max-width: 80ch;
  width: round(calc(100% - 2ch), 1ch);
  row-gap: 2ch;
  column-gap: 1lh;
}

#visible-content {
  position: sticky;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
}

#projects {
  .project-row {
    flex-wrap: wrap;
    row-gap: 1lh;
    column-gap: 2ch;
    overflow: hidden;
    display: none;

    a {
      text-decoration: none;
    }

    &[data-visible="true"] {
      display: flex;
    }

    .project {
      display: flex;
      flex-direction: column;
      flex-grow: 1;
      flex-basis: 0;
      max-height: 24lh;
      min-width: 30ch;
      background-color: var(--background1);

      .preview {
        flex-grow: 1;
        flex-basis: 0;
        flex-shrink: 1;
        --box-border-color: var(--background2);
      }

      &:focus .preview {
        --box-border-color: var(--blue);
      }

      .project-description {
        padding: 1ch;
        flex-shrink: 0;
        color: var(--foreground0);
        background-color: var(--background2);

        strong {
          color: var(--sky);
        }

        p {
          color: var(--foreground2);
        }
      }
    }
  }
}

.project-scroll-marker {
  min-height: 50vh;
  scroll-snap-align: start;

  &:last-of-type {
    min-height: 100vh;
  }
}
</style>

<script>
  import { attachScrollSnapListener } from "@/utils/scroll";

  let currentRow: HTMLElement | undefined;
  const indexCounter = document.querySelector("#index-counter") as HTMLElement;

  const handleTargetChange = (target?: HTMLElement) => {
    if(!target || currentRow === target) return;

    currentRow = target;

    const rowIndex = target.dataset.index;

    if(rowIndex) {
      (document.querySelectorAll(".project-row") as NodeListOf<HTMLElement>).forEach((row) => {
        row.setAttribute("data-visible", row.dataset.index === rowIndex ? "true" : "false");
        indexCounter.innerText = String(Number(rowIndex) + 1);
      });
    }
  }

  attachScrollSnapListener(".project-scroll-marker", handleTargetChange, "#gallery");
</script>
